{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Set the user in local storage\nconst setUser = user => {\n  if (user) {\n    localStorage.setItem('user', JSON.stringify(user));\n  } else {\n    localStorage.removeItem('user');\n  }\n};\n\n// Get the current user from local storage\nconst getUser = () => {\n  const user = localStorage.getItem('user');\n  return user ? JSON.parse(user) : null;\n};\n\n// Register a new user\nconst register = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/api/users/register`, userData);\n    const {\n      user\n    } = response.data.data;\n\n    // Save user to local storage\n    setUser(user);\n    return user;\n  } catch (error) {\n    var _error$response;\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n      message: 'Registration failed'\n    };\n  }\n};\n\n// Login user\nconst login = async (email, password) => {\n  try {\n    const response = await axios.post(`${API_URL}/api/users/login`, {\n      email,\n      password\n    });\n    const {\n      user\n    } = response.data.data;\n\n    // Save user to local storage\n    setUser(user);\n    return user;\n  } catch (error) {\n    var _error$response2;\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n      message: 'Login failed'\n    };\n  }\n};\n\n// Verify token and get current user\nconst verifyToken = async () => {\n  const user = getUser();\n  if (!user || !user.token) {\n    return null;\n  }\n  try {\n    const response = await axios.post(`${API_URL}/api/users/verify`, {\n      token: user.token\n    });\n    const {\n      user: currentUser\n    } = response.data.data;\n\n    // Update stored user data\n    setUser(currentUser);\n    return currentUser;\n  } catch (error) {\n    // If token is invalid, clear the user data\n    setUser(null);\n    return null;\n  }\n};\n\n// Logout user\nconst logout = async () => {\n  const user = getUser();\n  if (user && user._id) {\n    try {\n      await axios.post(`${API_URL}/api/users/logout/${user._id}`);\n    } catch (error) {\n      console.error('Error during logout:', error);\n    }\n  }\n\n  // Clear user from local storage\n  setUser(null);\n};\n\n// Check if user is authenticated\nconst isAuthenticated = () => {\n  return !!getUser();\n};\nconst authService = {\n  register,\n  login,\n  logout,\n  verifyToken,\n  getUser,\n  isAuthenticated\n};\nexport default authService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","setUser","user","localStorage","setItem","JSON","stringify","removeItem","getUser","getItem","parse","register","userData","response","post","data","error","_error$response","message","login","email","password","_error$response2","verifyToken","token","currentUser","logout","_id","console","isAuthenticated","authService"],"sources":["/Users/durgaprasadcreddy/Desktop/project/tourbuddy/frontend/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Set the user in local storage\nconst setUser = (user) => {\n  if (user) {\n    localStorage.setItem('user', JSON.stringify(user));\n  } else {\n    localStorage.removeItem('user');\n  }\n};\n\n// Get the current user from local storage\nconst getUser = () => {\n  const user = localStorage.getItem('user');\n  return user ? JSON.parse(user) : null;\n};\n\n// Register a new user\nconst register = async (userData) => {\n  try {\n    const response = await axios.post(`${API_URL}/api/users/register`, userData);\n    const { user } = response.data.data;\n    \n    // Save user to local storage\n    setUser(user);\n    \n    return user;\n  } catch (error) {\n    throw error.response?.data || { message: 'Registration failed' };\n  }\n};\n\n// Login user\nconst login = async (email, password) => {\n  try {\n    const response = await axios.post(`${API_URL}/api/users/login`, { email, password });\n    const { user } = response.data.data;\n    \n    // Save user to local storage\n    setUser(user);\n    \n    return user;\n  } catch (error) {\n    throw error.response?.data || { message: 'Login failed' };\n  }\n};\n\n// Verify token and get current user\nconst verifyToken = async () => {\n  const user = getUser();\n  \n  if (!user || !user.token) {\n    return null;\n  }\n  \n  try {\n    const response = await axios.post(`${API_URL}/api/users/verify`, { token: user.token });\n    const { user: currentUser } = response.data.data;\n    \n    // Update stored user data\n    setUser(currentUser);\n    \n    return currentUser;\n  } catch (error) {\n    // If token is invalid, clear the user data\n    setUser(null);\n    return null;\n  }\n};\n\n// Logout user\nconst logout = async () => {\n  const user = getUser();\n  \n  if (user && user._id) {\n    try {\n      await axios.post(`${API_URL}/api/users/logout/${user._id}`);\n    } catch (error) {\n      console.error('Error during logout:', error);\n    }\n  }\n  \n  // Clear user from local storage\n  setUser(null);\n};\n\n// Check if user is authenticated\nconst isAuthenticated = () => {\n  return !!getUser();\n};\n\nconst authService = {\n  register,\n  login,\n  logout,\n  verifyToken,\n  getUser,\n  isAuthenticated\n};\n\nexport default authService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}